openapi: 3.0.0
info:
  version: 0.1.0
  title: PlaatBook API
  description: A X/Twitter like clone example project

servers:
  - url: "http://localhost:8080"

# MARK: Components
components:
  securitySchemes:
    TokenAuth:
      type: http
      scheme: bearer

  parameters:
    # MARK: Path parameters
    PostID:
      name: id
      in: path
      description: Post ID
      required: true
      schema:
        type: string
        format: uuid
    SessionID:
      name: id
      in: path
      description: Session ID
      required: true
      schema:
        type: string
        format: uuid
    UserID:
      name: id
      in: path
      description: User ID or username
      required: true
      schema:
        type: string

    # MARK: Query parameters
    Query:
      name: q
      in: query
      description: Search query
      schema:
        type: string
    Page:
      name: page
      in: query
      description: Page number
      schema:
        type: integer
        minimum: 1
    Limit:
      name: limit
      in: query
      description: Number of items per page
      schema:
        type: integer
        minimum: 1
        maximum: 50

paths:
  # MARK: Misc
  /:
    get:
      tags: [Misc]
      summary: Basic information about REST API
      responses:
        "200":
          description: Name and version of REST API

  # MARK: Auth
  /auth/login:
    post:
      tags: [Auth]
      summary: Login with user credentials
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                logon:
                  type: string
                password:
                  type: string
              required:
                - logon
                - password
      responses:
        "200":
          description: Successful response
        "400":
          description: Bad Request
  /auth/validate:
    get:
      tags: [Auth]
      summary: Validate auth token
      security:
        - TokenAuth: []
      responses:
        "200":
          description: Successful response
        "401":
          description: Authorization error
  /auth/logout:
    put:
      tags: [Auth]
      summary: Logout auth token
      security:
        - TokenAuth: []
      responses:
        "200":
          description: Successful response
        "401":
          description: Authorization error

  # MARK: Posts
  /posts:
    get:
      tags: [Posts]
      summary: Get posts
      parameters:
        - $ref: "#/components/parameters/Query"
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/Limit"
      responses:
        "200":
          description: Successful response
        "400":
          description: Bad Request
    post:
      tags: [Posts]
      summary: Create new post
      security:
        - TokenAuth: []
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                text:
                  type: string
              required:
                - text
      responses:
        "200":
          description: Successful response
        "400":
          description: Bad Request
        "401":
          description: Authorization error
  /posts/{id}:
    get:
      tags: [Posts]
      summary: Get post
      parameters:
        - $ref: "#/components/parameters/PostID"
      responses:
        "200":
          description: Successful response
        "404":
          description: Post not found
    put:
      tags: [Posts]
      summary: Update post
      security:
        - TokenAuth: []
      parameters:
        - $ref: "#/components/parameters/PostID"
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                text:
                  type: string
      responses:
        "200":
          description: Successful response
        "400":
          description: Bad Request
        "401":
          description: Authorization error
        "404":
          description: Post not found
    delete:
      tags: [Posts]
      summary: Delete post
      security:
        - TokenAuth: []
      parameters:
        - $ref: "#/components/parameters/PostID"
      responses:
        "200":
          description: Successful response
        "401":
          description: Authorization error
        "404":
          description: Post not found
  /posts/{id}/replies:
    get:
      tags: [Posts]
      summary: Get post replies
      parameters:
        - $ref: "#/components/parameters/PostID"
        - $ref: "#/components/parameters/Query"
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/Limit"
      responses:
        "200":
          description: Successful response
        "404":
          description: Post not found
  /posts/{id}/reply:
    post:
      tags: [Posts]
      summary: Create post reply
      security:
        - TokenAuth: []
      parameters:
        - $ref: "#/components/parameters/PostID"
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                text:
                  type: string
              required:
                - text
      responses:
        "200":
          description: Successful response
        "400":
          description: Bad Request
        "401":
          description: Authorization error
        "404":
          description: Post not found
  /posts/{id}/repost:
    post:
      tags: [Posts]
      summary: Create post repost
      security:
        - TokenAuth: []
      parameters:
        - $ref: "#/components/parameters/PostID"
      responses:
        "200":
          description: Successful response
        "400":
          description: Bad Request
        "401":
          description: Authorization error
        "404":
          description: Post not found
  /posts/{id}/like:
    put:
      tags: [Posts]
      summary: Like post
      security:
        - TokenAuth: []
      parameters:
        - $ref: "#/components/parameters/PostID"
      responses:
        "200":
          description: Successful response
        "401":
          description: Authorization error
        "404":
          description: Post not found
    delete:
      tags: [Posts]
      summary: Remove post like
      security:
        - TokenAuth: []
      parameters:
        - $ref: "#/components/parameters/PostID"
      responses:
        "200":
          description: Successful response
        "401":
          description: Authorization error
        "404":
          description: Post not found
  /posts/{id}/dislike:
    put:
      tags: [Posts]
      summary: Dislike post
      security:
        - TokenAuth: []
      parameters:
        - $ref: "#/components/parameters/PostID"
      responses:
        "200":
          description: Successful response
        "401":
          description: Authorization error
        "404":
          description: Post not found
    delete:
      tags: [Posts]
      summary: Remove post dislike
      security:
        - TokenAuth: []
      parameters:
        - $ref: "#/components/parameters/PostID"
      responses:
        "200":
          description: Successful response
        "401":
          description: Authorization error
        "404":
          description: Post not found

  # MARK: Search
  /search:
    get:
      tags: [Search]
      summary: Search content
      parameters:
        - $ref: "#/components/parameters/Query"
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/Limit"
      responses:
        "200":
          description: Successful response
        "400":
          description: Bad Request

  # MARK: Users
  /users:
    get:
      tags: [Users]
      summary: Get users
      security:
        - TokenAuth: []
      parameters:
        - $ref: "#/components/parameters/Query"
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/Limit"
      responses:
        "200":
          description: Successful response
        "400":
          description: Bad Request
        "401":
          description: Authorization error
    post:
      tags: [Users]
      summary: Create new user
      security:
        - TokenAuth: []
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
              required:
                - username
                - email
                - password
      responses:
        "200":
          description: Successful response
        "400":
          description: Bad Request
  /users/{id}:
    get:
      tags: [Users]
      summary: Get user
      security:
        - TokenAuth: []
      parameters:
        - $ref: "#/components/parameters/UserID"
      responses:
        "200":
          description: Successful response
        "404":
          description: User not found
    put:
      tags: [Users]
      summary: Change user details
      security:
        - TokenAuth: []
      parameters:
        - $ref: "#/components/parameters/UserID"
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                  format: email
      responses:
        "200":
          description: Successful response
        "400":
          description: Bad Request
        "401":
          description: Authorization error
        "404":
          description: User not found
  /users/{id}/change_password:
    put:
      tags: [Users]
      summary: Change user password
      security:
        - TokenAuth: []
      parameters:
        - $ref: "#/components/parameters/UserID"
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                current_password:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: Successful response
        "400":
          description: Bad Request
        "401":
          description: Authorization error
        "404":
          description: User not found
  /users/{id}/sessions:
    get:
      tags: [Users]
      summary: Get active user sessions
      security:
        - TokenAuth: []
      parameters:
        - $ref: "#/components/parameters/UserID"
      responses:
        "200":
          description: Successful response
        "401":
          description: Authorization error
        "404":
          description: User not found
  /users/{id}/posts:
    get:
      tags: [Users]
      summary: Get user posts
      security:
        - TokenAuth: []
      parameters:
        - $ref: "#/components/parameters/UserID"
        - $ref: "#/components/parameters/Query"
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/Limit"
      responses:
        "200":
          description: Successful response
        "404":
          description: User not found

  # MARK: Sessions
  /sessions:
    get:
      tags: [Sessions]
      summary: Get sessions
      security:
        - TokenAuth: []
      responses:
        "200":
          description: Successful response
        "400":
          description: Bad Request
        "401":
          description: Authorization error
  /sessions/{id}:
    get:
      tags: [Sessions]
      summary: Get session
      security:
        - TokenAuth: []
      parameters:
        - $ref: "#/components/parameters/SessionID"
      responses:
        "200":
          description: Successful response
        "401":
          description: Authorization error
        "404":
          description: Session not found
    delete:
      tags: [Sessions]
      summary: Revoke session
      security:
        - TokenAuth: []
      parameters:
        - $ref: "#/components/parameters/SessionID"
      responses:
        "200":
          description: Successful response
        "401":
          description: Authorization error
        "404":
          description: Session not found
