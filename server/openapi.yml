openapi: 3.0.0
info:
  version: 0.1.0
  title: PlaatBook API
  description: A X/Twitter like clone example project

servers:
  - url: "http://localhost:8080"

paths:
  # MARK: Misc
  /:
    get:
      tags: [Misc]
      summary: Basic information about REST API
      responses:
        "200":
          description: Name and version of REST API
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HomeResponse"

  # MARK: Auth
  /auth/login:
    post:
      tags: [Auth]
      summary: Login with user credentials
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/AuthLoginBody"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthLoginResponse"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Report"
  /auth/validate:
    get:
      tags: [Auth]
      summary: Validate auth token
      security:
        - TokenAuth: []
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthValidateResponse"
        "401":
          description: Authorization error
  /auth/logout:
    put:
      tags: [Auth]
      summary: Logout auth token
      security:
        - TokenAuth: []
      responses:
        "200":
          description: Successful response
        "401":
          description: Authorization error

  # MARK: Posts
  /posts:
    get:
      tags: [Posts]
      summary: Get posts
      parameters:
        - $ref: "#/components/parameters/Query"
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/Limit"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostIndexResponse"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Report"
    post:
      tags: [Posts]
      summary: Create new post
      security:
        - TokenAuth: []
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/PostCreateUpdateBody"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Report"
        "401":
          description: Authorization error
  /posts/{id}:
    get:
      tags: [Posts]
      summary: Get post
      parameters:
        - $ref: "#/components/parameters/Id"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "404":
          description: Post not found
    put:
      tags: [Posts]
      summary: Update post
      security:
        - TokenAuth: []
      parameters:
        - $ref: "#/components/parameters/Id"
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/PostCreateUpdateBody"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Report"
        "401":
          description: Authorization error
        "404":
          description: Post not found
    delete:
      tags: [Posts]
      summary: Delete post
      security:
        - TokenAuth: []
      parameters:
        - $ref: "#/components/parameters/Id"
      responses:
        "200":
          description: Successful response
        "401":
          description: Authorization error
        "404":
          description: Post not found
  /posts/{id}/replies:
    get:
      tags: [Posts]
      summary: Get post replies
      parameters:
        - $ref: "#/components/parameters/Id"
        - $ref: "#/components/parameters/Query"
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/Limit"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostIndexResponse"
        "404":
          description: Post not found
  /posts/{id}/reply:
    post:
      tags: [Posts]
      summary: Create post reply
      security:
        - TokenAuth: []
      parameters:
        - $ref: "#/components/parameters/Id"
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/PostCreateUpdateBody"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Report"
        "401":
          description: Authorization error
        "404":
          description: Post not found
  /posts/{id}/repost:
    post:
      tags: [Posts]
      summary: Create post repost
      security:
        - TokenAuth: []
      parameters:
        - $ref: "#/components/parameters/Id"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Report"
        "401":
          description: Authorization error
        "404":
          description: Post not found
  /posts/{id}/like:
    put:
      tags: [Posts]
      summary: Like post
      security:
        - TokenAuth: []
      parameters:
        - $ref: "#/components/parameters/Id"
      responses:
        "200":
          description: Successful response
        "401":
          description: Authorization error
        "404":
          description: Post not found
    delete:
      tags: [Posts]
      summary: Remove post like
      security:
        - TokenAuth: []
      parameters:
        - $ref: "#/components/parameters/Id"
      responses:
        "200":
          description: Successful response
        "401":
          description: Authorization error
        "404":
          description: Post not found
  /posts/{id}/dislike:
    put:
      tags: [Posts]
      summary: Dislike post
      security:
        - TokenAuth: []
      parameters:
        - $ref: "#/components/parameters/Id"
      responses:
        "200":
          description: Successful response
        "401":
          description: Authorization error
        "404":
          description: Post not found
    delete:
      tags: [Posts]
      summary: Remove post dislike
      security:
        - TokenAuth: []
      parameters:
        - $ref: "#/components/parameters/Id"
      responses:
        "200":
          description: Successful response
        "401":
          description: Authorization error
        "404":
          description: Post not found

  # MARK: Users
  /users:
    get:
      tags: [Users]
      summary: Get users
      security:
        - TokenAuth: []
      parameters:
        - $ref: "#/components/parameters/Query"
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/Limit"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserIndexResponse"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Report"
        "401":
          description: Authorization error
    post:
      tags: [Users]
      summary: Create new user
      security:
        - TokenAuth: []
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/UserCreateBody"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Report"
  /users/{id}:
    get:
      tags: [Users]
      summary: Get user
      security:
        - TokenAuth: []
      parameters:
        - $ref: "#/components/parameters/Id"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: User not found
    put:
      tags: [Users]
      summary: Change user details
      security:
        - TokenAuth: []
      parameters:
        - $ref: "#/components/parameters/Id"
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/UserUpdateBody"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Report"
        "401":
          description: Authorization error
        "404":
          description: User not found
  /users/{id}/change_password:
    put:
      tags: [Users]
      summary: Change user password
      security:
        - TokenAuth: []
      parameters:
        - $ref: "#/components/parameters/Id"
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/UserUpdatePasswordBody"
      responses:
        "200":
          description: Successful response
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Report"
        "401":
          description: Authorization error
        "404":
          description: User not found
  /users/{id}/sessions:
    get:
      tags: [Users]
      summary: Get active user sessions
      security:
        - TokenAuth: []
      parameters:
        - $ref: "#/components/parameters/Id"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SessionIndexResponse"
        "401":
          description: Authorization error
        "404":
          description: User not found
  /users/{id}/posts:
    get:
      tags: [Users]
      summary: Get user posts
      security:
        - TokenAuth: []
      parameters:
        - $ref: "#/components/parameters/Id"
        - $ref: "#/components/parameters/Query"
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/Limit"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostIndexResponse"
        "404":
          description: User not found

  # MARK: Sessions
  /sessions:
    get:
      tags: [Sessions]
      summary: Get sessions
      security:
        - TokenAuth: []
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SessionIndexResponse"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Report"
        "401":
          description: Authorization error
  /sessions/{id}:
    get:
      tags: [Sessions]
      summary: Get session
      security:
        - TokenAuth: []
      parameters:
        - $ref: "#/components/parameters/Id"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Session"
        "401":
          description: Authorization error
        "404":
          description: Session not found
    delete:
      tags: [Sessions]
      summary: Revoke session
      security:
        - TokenAuth: []
      parameters:
        - $ref: "#/components/parameters/Id"
      responses:
        "200":
          description: Successful response
        "401":
          description: Authorization error
        "404":
          description: Session not found

# MARK: Components
components:
  securitySchemes:
    TokenAuth:
      type: http
      scheme: bearer

  # MARK: Parameters
  parameters:
    Id:
      name: id
      in: path
      description: ID
      required: true
      schema:
        type: string
        format: uuid

    Query:
      name: q
      in: query
      description: Search query
      schema:
        type: string

    Page:
      name: page
      in: query
      description: Page number
      schema:
        type: integer
        minimum: 1

    Limit:
      name: limit
      in: query
      description: Number of items per page
      schema:
        type: integer
        minimum: 1
        maximum: 50

  # MARK: Schemas
  schemas:
    Report:
      type: object
      additionalProperties:
        type: array
        items:
          type: string

    Pagination:
      type: object
      properties:
        page:
          type: integer
        limit:
          type: integer
        total:
          type: integer
      required:
        - page
        - limit
        - total

    # MARK: Models
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        email:
          type: string
          format: email
        firstname:
          type: string
        lastname:
          type: string
        birthdate:
          type: string
          format: date
        bio:
          type: string
        location:
          type: string
        website:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - username
        - email # FIXME: Hide when not owned in future
        - createdAt
        - updatedAt

    Session:
      type: object
      properties:
        id:
          type: string
          format: uuid
        ipAddress:
          type: string
        ipLatitude:
          type: number
        ipLongitude:
          type: number
        ipCountry:
          type: string
        ipCity:
          type: string
        clientName:
          type: string
        clientVersion:
          type: string
        clientOs:
          type: string
        expiresAt:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        user:
          $ref: "#/components/schemas/User"
      required:
        - id
        - ipAddress
        - expiresAt
        - createdAt
        - updatedAt

    Post:
      type: object
      properties:
        id:
          type: string
          format: uuid
        type:
          $ref: "#/components/schemas/PostType"
        text:
          type: string
        textHtml:
          type: string
        repliesCount:
          type: integer
        repostsCount:
          type: integer
        likesCount:
          type: integer
        dislikesCount:
          type: integer
        viewsCount:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        parentPost:
          $ref: "#/components/schemas/Post"
        user:
          $ref: "#/components/schemas/User"
        replies:
          type: array
          items:
            $ref: "#/components/schemas/Post"
        authUserLiked:
          type: boolean
        authUserDisliked:
          type: boolean
      required:
        - id
        - type
        - text
        - textHtml
        - repliesCount
        - repostsCount
        - likesCount
        - dislikesCount
        - viewsCount
        - createdAt
        - updatedAt

    PostType:
      type: string
      enum:
        - normal
        - reply
        - repost

    # MARK: Bodies
    AuthLoginBody:
      type: object
      properties:
        logon:
          type: string
        password:
          type: string
      required:
        - logon
        - password

    PostCreateUpdateBody:
      type: object
      properties:
        text:
          type: string
      required:
        - text

    UserCreateBody:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
      required:
        - username
        - email
        - password

    UserUpdateBody:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        firstname:
          type: string
        lastname:
          type: string
        birthdate:
          type: string
          format: date
        bio:
          type: string
        location:
          type: string
        website:
          type: string
      required:
        - username
        - email

    UserUpdatePasswordBody:
      type: object
      properties:
        currentPassword:
          type: string
        password:
          type: string
      required:
        - currentPassword
        - password

    # MARK: Responses
    HomeResponse:
      type: object
      properties:
        name:
          type: string
        version:
          type: string
      required:
        - name
        - version

    AuthLoginResponse:
      type: object
      properties:
        token:
          type: string
        session:
          $ref: "#/components/schemas/Session"
        user:
          $ref: "#/components/schemas/User"
      required:
        - token
        - session
        - user

    AuthValidateResponse:
      type: object
      properties:
        session:
          $ref: "#/components/schemas/Session"
        user:
          $ref: "#/components/schemas/User"
      required:
        - session
        - user

    PostIndexResponse:
      type: object
      properties:
        pagination:
          $ref: "#/components/schemas/Pagination"
        data:
          type: array
          items:
            $ref: "#/components/schemas/Post"
      required:
        - pagination
        - data

    UserIndexResponse:
      type: object
      properties:
        pagination:
          $ref: "#/components/schemas/Pagination"
        data:
          type: array
          items:
            $ref: "#/components/schemas/User"
      required:
        - pagination
        - data

    SessionIndexResponse:
      type: object
      properties:
        pagination:
          $ref: "#/components/schemas/Pagination"
        data:
          type: array
          items:
            $ref: "#/components/schemas/Session"
      required:
        - pagination
        - data
